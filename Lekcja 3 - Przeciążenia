/*
#include <iostream>
#include <stdio.h>
using namespace std;

class Vector {
public:
    Vector(double);
    Vector(double, double);
    Vector(double, double, double);
    int dimension_;

private:
    double data_[3] = {0,0,0};
};

Vector::Vector(double element1)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R1: " << endl;
    dimension_ = 1;
    data_[0] = element1;

}

Vector::Vector(double element1, double element2)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R2: " << endl;
    dimension_ = 2;
    data_[0] = element1;
    data_[1] = element2;
}

Vector::Vector(double element1, double element2, double element3)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R3: " << endl;
    dimension_ = 3;
    data_[0] = element1;
    data_[1] = element2;
    data_[2] = element2;
}



int main()
{
    Vector r1(1); // R1
    cout << "Obiekt klasy Vector o wymiarze:" << r1.dimension_ << endl;
    Vector r2(2,0); // R2
    cout << "Obiekt klasy Vector o wymiarze:" << r2.dimension_ << endl;
    Vector r3(3,0,0); // R3
    cout << "Obiekt klasy Vector o wymiarze:" << r3.dimension_ << endl;
}
*/

#include <iostream>
#include <stdio.h>
#include <cmath>
using namespace std;

class Vector {
public:
    Vector(double);
    Vector(double, double);
    Vector(double, double, double);
    void printElements();
    void printElements(Vector);
    int dimension_;
    double data_[3] = {0,0,0};
};

Vector::Vector(double element1)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R1: " << endl;
    dimension_ = 1;
    data_[0] = element1;

}

Vector::Vector(double element1, double element2)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R2: " << endl;
    dimension_ = 2;
    data_[0] = element1;
    data_[1] = element2;
}

Vector::Vector(double element1, double element2, double element3)
{
    cout << "\nTworzenie obiektu klasy Vector w przestrzeni R3: " << endl;
    dimension_ = 3;
    data_[0] = element1;
    data_[1] = element2;
    data_[2] = element3;
}

void Vector::printElements()
{
    cout << " Zmienna typu Vector :" << endl;
    for (int i = 0; i < dimension_; i++) {
        cout << " wartosc elementu o indeksie " << i << "  : " << data_[i] << endl;
    }
}


void Vector::printElements(Vector w)
{
    cout << "Zmienna typu Vector :" << endl;
    for (int i = 0; i < w.dimension_; i++) {
        cout << " wartosc elementu o indeksie " << i << "  : " << w.data_[i] << endl;
    }
}

float module(float *a)
{
    float mod=0;
    for (int i=0; i<3; i++){
        mod=mod+a[i]*a[i];
    }
    mod=sqrt(mod);
    return mod;
}

float module(Vector a)
{
    float mod=0;
    for(int i = 0; i<a.dimension_; i++){
        mod=mod+a.data_[i]*a.data_[i];
    }
    mod=sqrt(mod);
    return mod;
}




int main()
{
    Vector r1(5); // R1
    cout << "Obiekt klasy Vector o wymiarze:" << r1.dimension_ << endl;
    Vector r2(2,4); // R2
    cout << "Obiekt klasy Vector o wymiarze:" << r2.dimension_ << endl;
    Vector r3(3,6,9); // R3
    cout << "Obiekt klasy Vector o wymiarze:" << r3.dimension_ << endl;

    cout << "\n";
    r1.printElements(r1);
    cout << "\n";
    r1.printElements();
    cout << "\n";
    r2.printElements(r2);
    cout << "\n";
    r2.printElements();
    cout << "\n";
    r3.printElements(r3);
    cout << "\n";
    r3.printElements();

    cout << "\n";
    r2.printElements(r3);

    // ModuÅ‚y z wektorow  zad 4  //

    float vect[3]={1,2,3}; // wektor definiowany tablic
    cout << "Modul wektora definiowanego tablica: " << module(vect) << endl;
    cout << "Modul wektora defioniowanego obiektem klasy Vector: " << module(r3) << endl;
}
